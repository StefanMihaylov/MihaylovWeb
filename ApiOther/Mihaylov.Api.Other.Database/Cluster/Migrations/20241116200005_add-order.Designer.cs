// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mihaylov.Api.Other.Database.Cluster;

#nullable disable

namespace Mihaylov.Api.Other.Database.Migrations.MihaylovOtherClusterDb
{
    [DbContext(typeof(MihaylovOtherClusterDbContext))]
    [Migration("20241116200005_add-order")]
    partial class addorder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cluster")
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<byte>("DeploymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("GithubVersionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ApplicationId")
                        .HasName("ApplicationId");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Applications", "cluster");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ApplicationPod", b =>
                {
                    b.Property<int>("ApplicationPodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationPodId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ApplicationPodId")
                        .HasName("ApplicationPodId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationPods", "cluster");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ApplicationVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("HelmAppVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HelmVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("Date");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VersionId")
                        .HasName("VersionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationVersions", "cluster");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.Deployment", b =>
                {
                    b.Property<byte>("DeploymentId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DeploymentId")
                        .HasName("DeploymentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeploymentTypes", "cluster");

                    b.HasData(
                        new
                        {
                            DeploymentId = (byte)1,
                            Name = "Yaml"
                        },
                        new
                        {
                            DeploymentId = (byte)2,
                            Name = "HelmChart"
                        },
                        new
                        {
                            DeploymentId = (byte)3,
                            Name = "Command"
                        });
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.DeploymentFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FileId")
                        .HasName("FileId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("DeploymentFiles", "cluster");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ParserSetting", b =>
                {
                    b.Property<int>("ParserSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParserSettingId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CommandsRelease")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommandsVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("SelectorRelease")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SelectorVersion")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte>("VersionUrlVersionId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("VersionUrlrReleaseId")
                        .HasColumnType("tinyint");

                    b.HasKey("ParserSettingId")
                        .HasName("ParserSettingId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VersionUrlVersionId");

                    b.HasIndex("VersionUrlrReleaseId");

                    b.ToTable("ParserSettings", "cluster");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.VersionUrl", b =>
                {
                    b.Property<byte>("VersionUrlId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VersionUrlId")
                        .HasName("VersionUrlId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VersionUrlTypes", "cluster");

                    b.HasData(
                        new
                        {
                            VersionUrlId = (byte)1,
                            Name = "SiteUrl"
                        },
                        new
                        {
                            VersionUrlId = (byte)2,
                            Name = "ReleaseUrl"
                        },
                        new
                        {
                            VersionUrlId = (byte)3,
                            Name = "GithubVersionUrl"
                        },
                        new
                        {
                            VersionUrlId = (byte)4,
                            Name = "ResourceUrl"
                        });
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.Application", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.Deployment", "Deployment")
                        .WithMany()
                        .HasForeignKey("DeploymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deployment");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ApplicationPod", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.Application", "Application")
                        .WithMany("Pods")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ApplicationVersion", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.Application", "Application")
                        .WithMany("Versions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.DeploymentFile", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.Application", "Application")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.ParserSetting", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.Application", "Application")
                        .WithMany("ParserSettings")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.VersionUrl", "VersionUrlVersion")
                        .WithMany("VersionSettings")
                        .HasForeignKey("VersionUrlVersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Other.Database.Cluster.Models.VersionUrl", "VersionUrlrRelease")
                        .WithMany("ReleaseSettings")
                        .HasForeignKey("VersionUrlrReleaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("VersionUrlVersion");

                    b.Navigation("VersionUrlrRelease");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.Application", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("ParserSettings");

                    b.Navigation("Pods");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Cluster.Models.VersionUrl", b =>
                {
                    b.Navigation("ReleaseSettings");

                    b.Navigation("VersionSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
