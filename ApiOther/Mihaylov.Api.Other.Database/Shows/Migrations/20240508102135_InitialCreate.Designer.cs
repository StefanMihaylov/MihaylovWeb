// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mihaylov.Api.Other.Database.Shows;

#nullable disable

namespace Mihaylov.Api.Other.Database.Migrations
{
    [DbContext(typeof(MihaylovOtherShowDbContext))]
    [Migration("20240508102135_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("show")
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Band", b =>
                {
                    b.Property<int>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BandId")
                        .HasName("BandId");

                    b.ToTable("Bands", "show");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Concert", b =>
                {
                    b.Property<int>("ConcertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConcertId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketProviderId")
                        .HasColumnType("int");

                    b.HasKey("ConcertId")
                        .HasName("ConcertId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TicketProviderId");

                    b.ToTable("Concerts", "show");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.ConcertBand", b =>
                {
                    b.Property<int>("BandId")
                        .HasColumnType("int");

                    b.Property<int>("ConcertId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("BandId", "ConcertId");

                    b.HasIndex("ConcertId");

                    b.ToTable("ConcertBands", "show");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId")
                        .HasName("LocationId");

                    b.ToTable("Locations", "show");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.TicketProvider", b =>
                {
                    b.Property<int>("TickerProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TickerProviderId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TickerProviderId")
                        .HasName("TickerProviderId");

                    b.ToTable("TicketProviders", "show");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Concert", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Shows.Models.Location", "Location")
                        .WithMany("Concerts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Other.Database.Shows.Models.TicketProvider", "TicketProvider")
                        .WithMany("Concerts")
                        .HasForeignKey("TicketProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("TicketProvider");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.ConcertBand", b =>
                {
                    b.HasOne("Mihaylov.Api.Other.Database.Shows.Models.Band", "Band")
                        .WithMany("ConcertBands")
                        .HasForeignKey("BandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Other.Database.Shows.Models.Concert", "Concert")
                        .WithMany("ConcertBands")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Band", b =>
                {
                    b.Navigation("ConcertBands");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Concert", b =>
                {
                    b.Navigation("ConcertBands");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.Location", b =>
                {
                    b.Navigation("Concerts");
                });

            modelBuilder.Entity("Mihaylov.Api.Other.Database.Shows.Models.TicketProvider", b =>
                {
                    b.Navigation("Concerts");
                });
#pragma warning restore 612, 618
        }
    }
}
