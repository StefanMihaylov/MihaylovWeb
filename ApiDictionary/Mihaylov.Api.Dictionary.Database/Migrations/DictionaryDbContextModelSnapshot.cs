// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mihaylov.Api.Dictionary.Database;

#nullable disable

namespace Mihaylov.Api.Dictionary.Database.Migrations
{
    [DbContext(typeof(DictionaryDbContext))]
    partial class DictionaryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<int>("LearningSystemId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ModulesEndNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModulesStartNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("CourseId")
                        .HasName("PK_Courses_CourseId");

                    b.HasIndex("LearningSystemId");

                    b.HasIndex("LevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId")
                        .HasName("PK_Languages_LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.LearningSystem", b =>
                {
                    b.Property<int>("LearningSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningSystemId"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LearningSystemId")
                        .HasName("PK_LearningSystems_LearningSystemId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LearningSystems");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Descrition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LevelId")
                        .HasName("PK_Levels_LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Preposition", b =>
                {
                    b.Property<int>("PrepositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrepositionId"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PrepositionId")
                        .HasName("PK_Prepositions_PrepositionTypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Prepositions");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleNumber")
                        .HasColumnType("int");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PrepositionId")
                        .HasColumnType("int");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Translation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("RecordId")
                        .HasName("PK_Records_RecordId");

                    b.HasIndex("PrepositionId");

                    b.HasIndex("RecordTypeId");

                    b.HasIndex("CourseId", "Original")
                        .IsUnique();

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.RecordType", b =>
                {
                    b.Property<int>("RecordTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecordTypeId")
                        .HasName("PK_RecordTypes_RecordTypeId");

                    b.ToTable("RecordTypes");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Course", b =>
                {
                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.LearningSystem", "LearningSystem")
                        .WithMany()
                        .HasForeignKey("LearningSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LearningSystem");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.LearningSystem", b =>
                {
                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Preposition", b =>
                {
                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Mihaylov.Api.Dictionary.Database.Models.Record", b =>
                {
                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.Preposition", "Preposition")
                        .WithMany()
                        .HasForeignKey("PrepositionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mihaylov.Api.Dictionary.Database.Models.RecordType", "RecordType")
                        .WithMany()
                        .HasForeignKey("RecordTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Preposition");

                    b.Navigation("RecordType");
                });
#pragma warning restore 612, 618
        }
    }
}
